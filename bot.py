import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json
from datetime import datetime, time, timedelta
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.environ["BOT_TOKEN"]

# üë§ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ALLOWED_USERS = {
    157901324,  # –¢–≤–æ–π ID
    382950376   # ID —Ç–≤–æ–µ–π –¥–µ–≤—É—à–∫–∏
}

DATA_FILE = "/tmp/pill_data.json"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–æ–≤ (–ú–°–ö ‚Üí UTC)
SCHEDULE = [
    {"time_utc": time(7, 0), "label": "—É—Ç—Ä–µ–Ω–Ω—è—è", "hour_msk": 10},
    {"time_utc": time(11, 0), "label": "–¥–Ω–µ–≤–Ω–∞—è", "hour_msk": 14},
    {"time_utc": time(20, 0), "label": "–≤–µ—á–µ—Ä–Ω—è—è", "hour_msk": 23}
]

def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "user_id": None,
            "history": {}
        }

def save_data(data):
    recent_dates = sorted(data["history"].keys())[-14:]
    data["history"] = {d: data["history"][d] for d in recent_dates}
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def get_today():
    return datetime.now().strftime("%Y-%m-%d")

def is_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ GET –∏ HEAD) ===
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ health-check –∑–∞–ø—Ä–æ—Å–æ–≤
        pass

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), HealthCheckHandler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
Thread(target=run_http_server, daemon=True).start()

# === –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not is_allowed(user.id):
        await update.message.reply_text("üîí –ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤ üêæ")
        return

    data = load_data()
    data["user_id"] = user.id
    today = get_today()
    data["history"].setdefault(today, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})
    save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å ‚ù§Ô∏è")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    pill_time = job.data["pill_time"]
    today = get_today()

    data = load_data()
    if today not in data["history"]:
        data["history"][today] = {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False}
    save_data(data)

    await context.bot.send_message(
        chat_id=user_id,
        text=f"–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–∏—Ç—å {pill_time} —Ç–∞–±–ª–µ—Ç–æ—á–∫—É! üíä\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å ‚ù§Ô∏è",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{pill_time}")]
        ])
    )

    context.job_queue.run_once(
        check_if_taken,
        when=3600,
        data={"user_id": user_id, "date": today, "pill_time": pill_time},
        name=f"check_{today}_{pill_time}"
    )

async def check_if_taken(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id = job_data["user_id"]
    date = job_data["date"]
    pill_time = job_data["pill_time"]

    data = load_data()
    taken = data["history"].get(date, {}).get(pill_time, False)

    if not taken:
        try:
            await context.bot.send_message(
                chat_id=157901324,
                text=f"‚ö†Ô∏è –¢–≤–æ—è –∫–æ—Ç–∏–∫-–¥–µ–≤—É—à–∫–∞ –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∞ –ø—Ä–∏—ë–º {pill_time} —Ç–∞–±–ª–µ—Ç–∫–∏ ({date}).\n–ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –Ω–µ–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? üí¨"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_allowed(user_id):
        await query.message.reply_text("üîí –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    data = load_data()
    if data.get("user_id") != user_id:
        await query.edit_message_text(text="–≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–∞–±–ª–µ—Ç–∫–∞ üòâ")
        return

    pill_time = query.data.replace("taken_", "")
    today = get_today()

    if today not in data["history"]:
        data["history"][today] = {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False}
    data["history"][today][pill_time] = True
    save_data(data)

    await query.edit_message_text(text=f"–û—Ç–ª–∏—á–Ω–æ! {pill_time.capitalize()} —Ç–∞–±–ª–µ—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! üåü")

    try:
        await context.bot.send_message(
            chat_id=157901324,
            text=f"‚úÖ –¢–≤–æ—è –∫–æ—Ç–∏–∫-–¥–µ–≤—É—à–∫–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–ø–∏–ª–∞ {pill_time} —Ç–∞–±–ª–µ—Ç–æ—á–∫—É! üêæ\n–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m –≤ %H:%M')}"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id or user_id not in ALLOWED_USERS:
        return

    today = get_today()
    day_data = data["history"].get(today, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})

    taken_count = sum(day_data.values())
    total = 3

    status_lines = []
    for pill in ["—É—Ç—Ä–µ–Ω–Ω—è—è", "–¥–Ω–µ–≤–Ω–∞—è", "–≤–µ—á–µ—Ä–Ω—è—è"]:
        status = "‚úÖ" if day_data.get(pill) else "‚ùå"
        status_lines.append(f"{status} {pill.capitalize()}")

    message = "üìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫:\n" + "\n".join(status_lines)
    message += f"\n\n–ò—Ç–æ–≥–æ: {taken_count} –∏–∑ {total} üíä"

    if taken_count == 3:
        message += "\n\n–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö! üåà"
    elif taken_count == 0:
        message += "\n\n–ó–∞–≤—Ç—Ä–∞ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! üíñ"

    await context.bot.send_message(chat_id=user_id, text=message)

    try:
        await context.bot.send_message(
            chat_id=157901324,
            text=f"üìÜ –û—Ç—á—ë—Ç –∑–∞ {today}:\n{taken_count}/3 –ø—Ä–∏—ë–º–æ–≤"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id or user_id not in ALLOWED_USERS:
        return

    today = datetime.now().date()
    dates = [(today - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6, -1, -1)]
    
    total_taken = 0
    total_possible = 0

    for d in dates:
        day_data = data["history"].get(d, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})
        total_taken += sum(day_data.values())
        total_possible += 3

    message = (
        f"üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–¢—ã –ø—Ä–∏–Ω—è–ª–∞ {total_taken} –∏–∑ {total_possible} —Ç–∞–±–ª–µ—Ç–æ–∫! üåü\n\n"
    )

    if total_taken == total_possible:
        message += "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞! 100% ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ! ‚ú®"
    elif total_taken / total_possible >= 0.8:
        message += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
    elif total_taken / total_possible >= 0.5:
        message += "–•–æ—Ä–æ—à–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåà"
    else:
        message += "–Ø –∑–Ω–∞—é, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ! –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å! üíñ"

    await context.bot.send_message(chat_id=user_id, text=message)

    try:
        await context.bot.send_message(
            chat_id=157901324,
            text=f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n{total_taken}/{total_possible} —Ç–∞–±–ª–µ—Ç–æ–∫"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

async def schedule_jobs(app: Application):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id or user_id not in ALLOWED_USERS:
        return

    job_queue = app.job_queue

    for pill in SCHEDULE:
        job_queue.run_daily(
            send_reminder,
            time=pill["time_utc"],
            data={"user_id": user_id, "pill_time": pill["label"]},
            name=f"reminder_{pill['label']}"
        )

    job_queue.run_daily(
        daily_report,
        time=time(20, 30),  # = 23:30 –ú–°–ö
        name="daily_report"
    )

    job_queue.run_daily(
        weekly_report,
        time=time(20, 30),  # = 23:30 –ú–°–ö
        days=(6,),          # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        name="weekly_report"
    )

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback, pattern=r"taken_.*"))
    application.job_queue.run_once(schedule_jobs, when=1)
    application.run_polling()

if __name__ == '__main__':
    main()