import logging
import os
import json
from datetime import datetime, time, timezone, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
TOKEN = os.environ["BOT_TOKEN"]

# –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ /tmp (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render)
DATA_FILE = "/tmp/user_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"last_taken": None, "user_id": None}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

# –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã
MOTIVATIONAL_PHRASES = [
    "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –≤—ã–ø–∏–ª–∞ —Ç–∞–±–ª–µ—Ç–æ—á–∫—É ‚Äî —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –≥–µ—Ä–æ–∏–Ω—è!",
    "–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ üíñ",
    "–¢—ã —Å—É–ø–µ—Ä! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üëè",
    "–¢–∞–±–ª–µ—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞? –£–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤—å—é! üåø",
    "–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üê±"
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    data["user_id"] = user.id
    save_data(data)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! üíä\n–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ –≤ 10:00, 14:00 –∏ 23:00.\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –≤—ã–ø—å—ë—à—å ‚Äî —è –ø–æ—Ö–≤–∞–ª—é —Ç–µ–±—è! ‚ù§Ô∏è"
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    dose = job.data.get("dose", 1)

    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤
    messages = {
        1: "–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Ç–∞–±–ª–µ—Ç–æ—á–∫—É! üåû",
        2: "–ö–æ—Ç–∏–∫, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –¥–Ω–µ–≤–Ω—É—é —Ç–∞–±–ª–µ—Ç–æ—á–∫—É! ‚òÄÔ∏è",
        3: "–ö–æ—Ç–∏–∫, –≤—ã–ø–µ–π –≤–µ—á–µ—Ä–Ω—é—é —Ç–∞–±–ª–µ—Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º üí§",
    }
    text = messages.get(dose, "–ö–æ—Ç–∏–∫, –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–æ—á–∫—É üê±")

    await context.bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{dose}")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = load_data()

    if data.get("user_id") != user_id:
        await query.edit_message_text(text="–≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–∞–±–ª–µ—Ç–∫–∞ üòâ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –ø—Ä–∏—ë–º–∞
    data["last_taken"] = datetime.now().isoformat()
    save_data(data)

    # –ü–æ—Ö–≤–∞–ª–∞
    await query.edit_message_text(text=MOTIVATIONAL_PHRASES[0])

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def schedule_all_reminders(app: Application):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id:
        return

    # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò –ß–ê–°–û–í–û–ô –ü–û–Ø–° –ü–û–î –°–ï–ë–Ø!
    # –ü—Ä–∏–º–µ—Ä—ã:
    # –ú–æ—Å–∫–≤–∞, –ú–∏–Ω—Å–∫       ‚Üí timedelta(hours=3)
    # –ö–∏–µ–≤, –†–∏–≥–∞          ‚Üí timedelta(hours=2)
    # –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥        ‚Üí timedelta(hours=5)
    # –õ–æ–Ω–¥–æ–Ω              ‚Üí timedelta(hours=0)
    # –ù—å—é-–ô–æ—Ä–∫ (–ª–µ—Ç–æ–º)    ‚Üí timedelta(hours=-4)
    tz = timezone(timedelta(hours=3))  # ‚Üê –ò–ó–ú–ï–ù–ò –≠–¢–û!

    times = [
        time(10, 0, tzinfo=tz),   # —É—Ç—Ä–æ
        time(14, 0, tzinfo=tz),   # –¥–µ–Ω—å
        time(23, 0, tzinfo=tz),   # –Ω–æ—á—å
    ]

    for i, t in enumerate(times):
        app.job_queue.run_daily(
            send_reminder,
            time=t,
            data={"user_id": user_id, "dose": i + 1},
            name=f"reminder_dose_{i+1}"
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {t}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback, pattern=r"taken_\d"))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    application.job_queue.run_once(schedule_all_reminders, when=1)

    application.run_polling()

if __name__ == '__main__':
    main()