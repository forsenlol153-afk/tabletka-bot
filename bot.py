import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json
from datetime import datetime, time

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ –≤ –∫–æ–¥–µ!)
TOKEN = os.environ["BOT_TOKEN"]

# –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ /tmp (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render)
DATA_FILE = "/tmp/user_data.json"

def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"last_taken": None, "user_id": None}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

MOTIVATIONAL_PHRASES = [
    "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –≤—ã–ø–∏–ª–∞ —Ç–∞–±–ª–µ—Ç–æ—á–∫—É ‚Äî —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –≥–µ—Ä–æ–∏–Ω—è!",
    "–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ üíñ",
    "–¢—ã —Å—É–ø–µ—Ä! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üëè",
    "–¢–∞–±–ª–µ—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞? –£–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤—å—é! üåø",
    "–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üê±"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    data["user_id"] = user.id
    save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏ ‚ù§Ô∏è")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    await context.bot.send_message(
        chat_id=user_id,
        text="–ö–æ—Ç–∏–∫, –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–æ—á–∫—É üê±\n–ö–æ—Ç–∏–∫, –≤—ã–ø–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞–±–ª–µ—Ç–æ—á–∫—É",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data="taken")]
        ])
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = load_data()
    
    if data.get("user_id") != user_id:
        await query.edit_message_text(text="–≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–∞–±–ª–µ—Ç–∫–∞ üòâ")
        return

    data["last_taken"] = datetime.now().isoformat()
    save_data(data)
    await query.edit_message_text(text=MOTIVATIONAL_PHRASES[0])

async def schedule_reminders(app: Application):
    data = load_data()
    user_id = data.get("user_id")
    if user_id:
        app.job_queue.run_daily(
            send_reminder,
            time=time(16, 0),  # 19:00 –ø–æ UTC+3 ‚Üí —Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ!
            data={"user_id": user_id},
            name="daily_reminder"
        )

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback, pattern="taken"))
    application.job_queue.run_once(schedule_reminders, when=1)
    application.run_polling()

if __name__ == '__main__':
    main()