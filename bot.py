import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json
from datetime import datetime, time, timedelta
from threading import Thread
from http.server import HTTPServer, BaseHTTPRequestHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# üë§ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò ID!)
ALLOWED_USERS = {
    157901324,  # –¢–≤–æ–π ID
    382950376   # ID —Ç–≤–æ–µ–π –¥–µ–≤—É—à–∫–∏
}

DATA_FILE = "pill_data.json"

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—ë–º–æ–≤ (UTC –≤—Ä–µ–º—è –¥–ª—è Render)
SCHEDULE = [
    {"time_utc": time(7, 0), "label": "—É—Ç—Ä–µ–Ω–Ω—è—è", "hour_msk": 10},   # 10:00 –ú–°–ö
    {"time_utc": time(11, 0), "label": "–¥–Ω–µ–≤–Ω–∞—è", "hour_msk": 14},   # 14:00 –ú–°–ö  
    {"time_utc": time(20, 0), "label": "–≤–µ—á–µ—Ä–Ω—è—è", "hour_msk": 23}   # 23:00 –ú–°–ö
]

def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"user_id": None, "history": {}}

def save_data(data):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
    if "history" in data and data["history"]:
        recent_dates = sorted(data["history"].keys())[-14:]
        data["history"] = {d: data["history"][d] for d in recent_dates if d in data["history"]}
    
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def get_today():
    return datetime.now().strftime("%Y-%m-%d")

def is_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"OK")

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

    def log_message(self, format, *args):
        pass

def run_http_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), HealthCheckHandler)
    logger.info(f"üåê Health-check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
Thread(target=run_http_server, daemon=True).start()

# === –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if not is_allowed(user.id):
            await update.message.reply_text("üîí –ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç –±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤ üêæ")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_data()
        today = get_today()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
        data["user_id"] = user.id
        if today not in data["history"]:
            data["history"][today] = {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False}
        save_data(data)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º jobs –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await schedule_jobs(context.application)

        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–¥—É—Ç –≤:\n"
            "‚Ä¢ 10:00 (—É—Ç—Ä–µ–Ω–Ω—è—è) üê¶\n"  
            "‚Ä¢ 14:00 (–¥–Ω–µ–≤–Ω–∞—è) ‚òÄÔ∏è\n"
            "‚Ä¢ 23:00 (–≤–µ—á–µ—Ä–Ω—è—è) üåô\n\n"
            "–ü–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ ‚ù§Ô∏è"
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    try:
        job = context.job
        user_id = job.data["user_id"]
        pill_time = job.data["pill_time"]
        today = get_today()

        logger.info(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {pill_time} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        data = load_data()
        if today not in data["history"]:
            data["history"][today] = {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False}
        save_data(data)

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üíä –ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–∏—Ç—å {pill_time} —Ç–∞–±–ª–µ—Ç–æ—á–∫—É!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å ‚ù§Ô∏è",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{pill_time}")]
            ])
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å
        context.job_queue.run_once(
            check_if_taken,
            when=3600,  # 1 —á–∞—Å
            data={"user_id": user_id, "date": today, "pill_time": pill_time},
            name=f"check_{today}_{pill_time}"
        )
        
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def check_if_taken(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id = job_data["user_id"]
    date = job_data["date"]
    pill_time = job_data["pill_time"]

    data = load_data()
    taken = data["history"].get(date, {}).get(pill_time, False)

    if not taken:
        try:
            await context.bot.send_message(
                chat_id=157901324,  # –¢–≤–æ–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                text=f"‚ö†Ô∏è –¢–≤–æ—è –∫–æ—Ç–∏–∫-–¥–µ–≤—É—à–∫–∞ –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∞ –ø—Ä–∏—ë–º {pill_time} —Ç–∞–±–ª–µ—Ç–∫–∏ ({date}).\n–ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –Ω–µ–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? üí¨"
            )
            logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π {pill_time} —Ç–∞–±–ª–µ—Ç–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not is_allowed(user_id):
        await query.message.reply_text("üîí –¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return

    data = load_data()
    if data.get("user_id") != user_id:
        await query.edit_message_text(text="–≠—Ç–æ –Ω–µ —Ç–≤–æ—è —Ç–∞–±–ª–µ—Ç–∫–∞ üòâ")
        return

    pill_time = query.data.replace("taken_", "")
    today = get_today()

    if today not in data["history"]:
        data["history"][today] = {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False}
    data["history"][today][pill_time] = True
    save_data(data)

    await query.edit_message_text(text=f"–û—Ç–ª–∏—á–Ω–æ! {pill_time.capitalize()} —Ç–∞–±–ª–µ—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! üåü")

    try:
        await context.bot.send_message(
            chat_id=157901324,  # –¢–≤–æ–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            text=f"‚úÖ –¢–≤–æ—è –∫–æ—Ç–∏–∫-–¥–µ–≤—É—à–∫–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–ø–∏–ª–∞ {pill_time} —Ç–∞–±–ª–µ—Ç–æ—á–∫—É! üêæ\n–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m –≤ %H:%M')}"
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø—Ä–∏—ë–º–µ {pill_time} —Ç–∞–±–ª–µ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id or user_id not in ALLOWED_USERS:
        return

    today = get_today()
    day_data = data["history"].get(today, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})

    taken_count = sum(day_data.values())
    total = 3

    status_lines = []
    for pill in ["—É—Ç—Ä–µ–Ω–Ω—è—è", "–¥–Ω–µ–≤–Ω–∞—è", "–≤–µ—á–µ—Ä–Ω—è—è"]:
        status = "‚úÖ" if day_data.get(pill) else "‚ùå"
        status_lines.append(f"{status} {pill.capitalize()}")

    message = "üìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–æ–∫:\n" + "\n".join(status_lines)
    message += f"\n\n–ò—Ç–æ–≥–æ: {taken_count} –∏–∑ {total} üíä"

    if taken_count == 3:
        message += "\n\n–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö! üåà"
    elif taken_count == 0:
        message += "\n\n–ó–∞–≤—Ç—Ä–∞ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! üíñ"

    await context.bot.send_message(chat_id=user_id, text=message)

    try:
        await context.bot.send_message(
            chat_id=157901324,  # –¢–≤–æ–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            text=f"üìÜ –û—Ç—á—ë—Ç –∑–∞ {today}:\n{taken_count}/3 –ø—Ä–∏—ë–º–æ–≤"
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = data.get("user_id")
    if not user_id or user_id not in ALLOWED_USERS:
        return

    today = datetime.now().date()
    dates = [(today - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(6, -1, -1)]
    
    total_taken = 0
    total_possible = 0

    for d in dates:
        day_data = data["history"].get(d, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})
        total_taken += sum(day_data.values())
        total_possible += 3

    message = (
        f"üìà –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–¢—ã –ø—Ä–∏–Ω—è–ª–∞ {total_taken} –∏–∑ {total_possible} —Ç–∞–±–ª–µ—Ç–æ–∫! üåü\n\n"
    )

    if total_taken == total_possible:
        message += "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞! 100% ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ! ‚ú®"
    elif total_taken / total_possible >= 0.8:
        message += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™"
    elif total_taken / total_possible >= 0.5:
        message += "–•–æ—Ä–æ—à–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåà"
    else:
        message += "–Ø –∑–Ω–∞—é, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ! –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å! üíñ"

    await context.bot.send_message(chat_id=user_id, text=message)

    try:
        await context.bot.send_message(
            chat_id=157901324,  # –¢–≤–æ–π ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            text=f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n{total_taken}/{total_possible} —Ç–∞–±–ª–µ—Ç–æ–∫"
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")

async def schedule_jobs(app: Application):
    try:
        data = load_data()
        user_id = data.get("user_id")
        
        if not user_id or not is_allowed(user_id):
            logger.warning("‚ùå User ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
            return

        job_queue = app.job_queue
        if not job_queue:
            logger.error("‚ùå Job queue –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ jobs —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if job.name and (job.name.startswith("reminder_") or job.name.startswith("daily_report") or job.name.startswith("weekly_report")):
                job.schedule_removal()

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ jobs –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for pill in SCHEDULE:
            job_queue.run_daily(
                send_reminder,
                time=pill["time_utc"],
                data={"user_id": user_id, "pill_time": pill["label"]},
                name=f"reminder_{pill['label']}_{user_id}"
            )
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{pill['label']}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {pill['time_utc']} UTC ({pill['hour_msk']}:00 –ú–°–ö)")

        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
        job_queue.run_daily(
            daily_report,
            time=time(20, 30),  # = 23:30 –ú–°–ö
            name=f"daily_report_{user_id}"
        )
        logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 23:30 –ú–°–ö")

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        job_queue.run_daily(
            weekly_report,
            time=time(20, 30),  # = 23:30 –ú–°–ö
            days=(6,),  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (0=–ø–Ω, 6=–≤—Å)
            name=f"weekly_report_{user_id}"
        )
        logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 23:30 –ú–°–ö")

        logger.info(f"‚úÖ –í—Å–µ jobs —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_jobs: {e}")

# === –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—ë–º–∞ —Ç–∞–±–ª–µ—Ç–æ–∫ —Å–µ–≥–æ–¥–Ω—è"""
    if not is_allowed(update.effective_user.id):
        return
    
    data = load_data()
    today = get_today()
    day_data = data["history"].get(today, {"—É—Ç—Ä–µ–Ω–Ω—è—è": False, "–¥–Ω–µ–≤–Ω–∞—è": False, "–≤–µ—á–µ—Ä–Ω—è—è": False})
    
    status_text = "üíä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å—Ç–∞—Ç—É—Å:\n"
    for pill, taken in day_data.items():
        status_text += f"{'‚úÖ' if taken else '‚ùå'} {pill.capitalize()}\n"
    
    await update.message.reply_text(status_text)

async def timecheck(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    now_utc = datetime.utcnow()
    now_msk = now_utc + timedelta(hours=3)
    
    await update.message.reply_text(
        f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
        f"UTC: {now_utc.strftime('%H:%M')}\n"
        f"–ú–°–ö: {now_msk.strftime('%H:%M')}\n"
        f"–î–∞—Ç–∞: {now_utc.strftime('%Y-%m-%d')}"
    )

async def debug_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ jobs"""
    if not is_allowed(update.effective_user.id):
        return
        
    job_queue = context.application.job_queue
    if not job_queue:
        await update.message.reply_text("‚ùå Job queue –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    jobs = job_queue.jobs()
    if not jobs:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö jobs")
        return
        
    message = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ jobs:\n"
    for i, job in enumerate(jobs, 1):
        next_run = job.next_t.strftime("%d.%m %H:%M UTC") if job.next_t else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        message += f"{i}. {job.name} - —Å–ª–µ–¥. –∑–∞–ø—É—Å–∫: {next_run}\n"
    
    await update.message.reply_text(message)

async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if not is_allowed(update.effective_user.id):
        return
        
    pill_time = "—É—Ç—Ä–µ–Ω–Ω—è—è"  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "–¥–Ω–µ–≤–Ω–∞—è" –∏–ª–∏ "–≤–µ—á–µ—Ä–Ω—è—è"
    
    await update.message.reply_text(f"üîî –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {pill_time}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await context.bot.send_message(
        chat_id=update.effective_user.id,
        text=f"üíä –¢–ï–°–¢: –ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–∏—Ç—å {pill_time} —Ç–∞–±–ª–µ—Ç–æ—á–∫—É!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data=f"taken_{pill_time}")]
        ])
    )

def main():
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("time", timecheck))
    application.add_handler(CommandHandler("debug", debug_jobs))
    application.add_handler(CommandHandler("test", test_reminder))
    application.add_handler(CallbackQueryHandler(button_callback, pattern=r"taken_.*"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ jobs
    application.job_queue.run_once(schedule_jobs, when=1)
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()